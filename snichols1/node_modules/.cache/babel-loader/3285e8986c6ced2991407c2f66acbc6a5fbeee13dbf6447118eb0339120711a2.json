{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sean N\\\\source\\\\repos\\\\SeanNichols1\\\\snichols.co.nz\\\\snichols1\\\\src\\\\HauntedPika.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Haunted = ({\n  onChoice\n}) => {\n  _s();\n  const [cast, setCast] = useState([]); /* Setting a constant for holding data. useState will generate the state */\n\n  async function fetchStuff() {\n    // Async function expects something to be returned. \n    const response = await fetch('cast.json'); // Can only use Await in an async function. Pauses function until promosed thing is resolved\n    setCast(await response.json());\n  }\n  useEffect(() => {\n    fetchStuff();\n  });\n  return (\n    /*#__PURE__*/\n    //Navigation stuff in the first half of this returned HTML\n    _jsxDEV(\"span\", {\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"columbus\",\n        style: {\n          backgroundColor: 'Orange'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"details\", {\n              role: \"list\",\n              children: [/*#__PURE__*/_jsxDEV(\"summary\", {\n                \"aria-haspopup\": \"listbox\",\n                role: \"listitem\",\n                children: \"Home\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 19,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                role: \"listbox\",\n                children: cast.map(sean => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: /*#__PURE__*/_jsxDEV(\"a\", {\n                    onClick: () => {\n                      onChoice(sean);\n                    },\n                    \"data-tooltip\": sean.name,\n                    children: sean.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 24,\n                    columnNumber: 45\n                  }, this)\n                }, sean.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 23,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 20,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 18,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"grid\",\n          gridTemplateColumns: 'repeat(auto-fit, minmax(0px, 1fr))',\n          gap: '1rem',\n          marginBottom: '1rem'\n        },\n        children: cast.map(sean =>\n        /*#__PURE__*/\n        /* onClick means when clicked, it sends the data back through export on line 3 to App.jsx and show the details*/\n        _jsxDEV(\"a\", {\n          href: \"#thisModalIsHiddenBecauseItWasAnnoying\",\n          onClick: () => {\n            onChoice(sean);\n          },\n          \"data-toolip\": sean.name,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `images/${sean.slug}.png`,\n            alt: sean.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 21\n          }, this)\n        }, sean.slug, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this) /* Have to use the ridiculous ` ` things to close any text that has ${} in it */)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this)\n  );\n};\n_s(Haunted, \"AdIVhaH7Hx6re/u/3OnvwdzRW0I=\");\n_c = Haunted;\nexport default Haunted; // Exports the return() html back to app.jsx for the DOM\nvar _c;\n$RefreshReg$(_c, \"Haunted\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Haunted","onChoice","_s","cast","setCast","fetchStuff","response","fetch","json","children","className","style","backgroundColor","role","fileName","_jsxFileName","lineNumber","columnNumber","map","sean","onClick","name","id","display","gridTemplateColumns","gap","marginBottom","href","src","slug","alt","_c","$RefreshReg$"],"sources":["C:/Users/Sean N/source/repos/SeanNichols1/snichols.co.nz/snichols1/src/HauntedPika.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst Haunted = ({onChoice}) => {\r\n    const [cast, setCast] = useState([]); /* Setting a constant for holding data. useState will generate the state */\r\n\r\n    async function fetchStuff(){        // Async function expects something to be returned. \r\n        const response = await fetch('cast.json') // Can only use Await in an async function. Pauses function until promosed thing is resolved\r\n        setCast(await response.json());\r\n    }\r\n\r\n    useEffect(() => { fetchStuff(); });\r\n\r\n    return ( //Navigation stuff in the first half of this returned HTML\r\n        <span>\r\n            <nav className=\"columbus\" style={{ backgroundColor: 'Orange' }}>\r\n                <ul>\r\n                    <li>\r\n                        <details role=\"list\">\r\n                            <summary aria-haspopup=\"listbox\" role=\"listitem\">Home</summary>\r\n                            <ul role=\"listbox\">\r\n                                {\r\n                                    cast.map(sean => (\r\n                                        <li key={sean.id}>\r\n                                            <a onClick={() => { onChoice(sean) }} data-tooltip={sean.name}>{sean.name}</a>\r\n                                        </li>\r\n                                    )\r\n                                    )\r\n                                }\r\n                            </ul>\r\n                        </details>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n            <div style={{\r\n            display: \"grid\",\r\n            gridTemplateColumns: 'repeat(auto-fit, minmax(0px, 1fr))',\r\n            gap: '1rem',\r\n            marginBottom: '1rem'\r\n        }}>\r\n            {\r\n                cast.map(sean => ( /* onClick means when clicked, it sends the data back through export on line 3 to App.jsx and show the details*/\r\n                    <a href=\"#thisModalIsHiddenBecauseItWasAnnoying\" onClick={() => { onChoice(sean) }} key={sean.slug} data-toolip={sean.name}> \r\n                    <img src={`images/${sean.slug}.png`} alt={sean.name} /> \r\n                    </a>/* Have to use the ridiculous ` ` things to close any text that has ${} in it */\r\n                ))\r\n            }\r\n        </div>\r\n        </span>\r\n    )\r\n} \r\nexport default Haunted; // Exports the return() html back to app.jsx for the DOM"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
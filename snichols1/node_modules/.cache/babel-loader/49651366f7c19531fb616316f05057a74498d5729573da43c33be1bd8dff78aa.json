{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sean N\\\\source\\\\repos\\\\SeanNichols1\\\\snichols.co.nz\\\\snichols1\\\\src\\\\HauntedPika.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Haunted = ({\n  onChoice\n}) => {\n  _s();\n  const [cast, setCast] = useState([]); /* Setting a constant for holding data. useState will generate the state */\n\n  async function fetchStuff() {\n    // Async function expects something to be returned. \n    const response = await fetch('cast.json'); // Can only use Await in an async function. Pauses function until promosed thing is resolved\n    setCast(await response.json());\n  }\n  useEffect(() => {\n    fetchStuff();\n  });\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: 'repeat(auto-fit, minmax(0px, 1fr))',\n        gap: '1rem',\n        marginBottom: '1rem'\n      },\n      children: cast.map(sean =>\n      /*#__PURE__*/\n      /* onClick means when clicked, it sends the data back through export on line 3 to App.jsx and show the details*/\n      _jsxDEV(\"a\", {\n        href: \"#thisModalIsHiddenBecauseItWasAnnoying\",\n        onClick: () => {\n          onChoice(sean);\n        },\n        \"data-toolip\": sean.name,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `images/${sean.slug}.png`,\n          alt: sean.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this)\n      }, sean.slug, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 21\n      }, this) /* Have to use the ridiculous ` ` things to close any text that has ${} in it */)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 15\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n};\n_s(Haunted, \"AdIVhaH7Hx6re/u/3OnvwdzRW0I=\");\n_c = Haunted;\nexport default Haunted; // Exports the return() html back to app.jsx for the DOM\nvar _c;\n$RefreshReg$(_c, \"Haunted\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Haunted","onChoice","_s","cast","setCast","fetchStuff","response","fetch","json","children","style","display","gridTemplateColumns","gap","marginBottom","map","sean","href","onClick","name","src","slug","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sean N/source/repos/SeanNichols1/snichols.co.nz/snichols1/src/HauntedPika.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst Haunted = ({onChoice}) => {\r\n    const [cast, setCast] = useState([]); /* Setting a constant for holding data. useState will generate the state */\r\n\r\n    async function fetchStuff(){        // Async function expects something to be returned. \r\n        const response = await fetch('cast.json') // Can only use Await in an async function. Pauses function until promosed thing is resolved\r\n        setCast(await response.json());\r\n    }\r\n\r\n    useEffect(() => { fetchStuff(); });\r\n\r\n    return (\r\n        <span><div style={{\r\n            display: \"grid\",\r\n            gridTemplateColumns: 'repeat(auto-fit, minmax(0px, 1fr))',\r\n            gap: '1rem',\r\n            marginBottom: '1rem'\r\n        }}>\r\n            {\r\n                cast.map(sean => ( /* onClick means when clicked, it sends the data back through export on line 3 to App.jsx and show the details*/\r\n                    <a href=\"#thisModalIsHiddenBecauseItWasAnnoying\" onClick={() => { onChoice(sean) }} key={sean.slug} data-toolip={sean.name}> \r\n                    <img src={`images/${sean.slug}.png`} alt={sean.name} /> \r\n                    </a>/* Have to use the ridiculous ` ` things to close any text that has ${} in it */\r\n                ))\r\n            }\r\n        </div>\r\n        </span>\r\n    )\r\n}\r\nexport default Haunted; // Exports the return() html back to app.jsx for the DOM"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,OAAO,GAAGA,CAAC;EAACC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC5B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEtC,eAAeS,UAAUA,CAAA,EAAE;IAAS;IAChC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAW,CAAC,EAAC;IAC1CH,OAAO,CAAC,MAAME,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;EAClC;EAEAX,SAAS,CAAC,MAAM;IAAEQ,UAAU,CAAC,CAAC;EAAE,CAAC,CAAC;EAElC,oBACIN,OAAA;IAAAU,QAAA,eAAMV,OAAA;MAAKW,KAAK,EAAE;QACdC,OAAO,EAAE,MAAM;QACfC,mBAAmB,EAAE,oCAAoC;QACzDC,GAAG,EAAE,MAAM;QACXC,YAAY,EAAE;MAClB,CAAE;MAAAL,QAAA,EAEMN,IAAI,CAACY,GAAG,CAACC,IAAI;MAAA;MAAM;MACfjB,OAAA;QAAGkB,IAAI,EAAC,wCAAwC;QAACC,OAAO,EAAEA,CAAA,KAAM;UAAEjB,QAAQ,CAACe,IAAI,CAAC;QAAC,CAAE;QAAiB,eAAaA,IAAI,CAACG,IAAK;QAAAV,QAAA,eAC3HV,OAAA;UAAKqB,GAAG,EAAG,UAASJ,IAAI,CAACK,IAAK,MAAM;UAACC,GAAG,EAAEN,IAAI,CAACG;QAAK;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC,GADkCV,IAAI,CAACK,IAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE/F,CAAC,iFACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEf,CAAC;AAAAxB,EAAA,CA3BKF,OAAO;AAAA2B,EAAA,GAAP3B,OAAO;AA4Bb,eAAeA,OAAO,CAAC,CAAC;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const Haunted=_ref=>{let{onChoice}=_ref;const[cast,setCast]=useState([]);/* Setting a constant for holding data. useState will generate the state */async function fetchStuff(){const response=await fetch('cast.json');setCast(await response.json());}useEffect(()=>{fetchStuff();});return/*#__PURE__*/_jsx(\"div\",{style:{display:\"grid\",gridTemplateColumns:'repeat(auto-fit, minmax(0px, 1fr))',gap:'1rem',marginBottom:'1rem'},children:cast.map(sean=>/*#__PURE__*/ /* onClick means when clicked, it sends the data back through export on line 3 to App.jsx and show the details*/_jsx(\"a\",{href:\"javascript:void(0);\",onClick:()=>{onChoice(sean);},\"data-toolip\":sean.name,children:/*#__PURE__*/_jsx(\"img\",{src:\"images/\".concat(sean.slug,\".png\"),alt:sean.name})},sean.slug)/* Have to use the ridiculous ` ` things to close any text that has ${} in it */)});};export default Haunted;","map":{"version":3,"names":["useState","useEffect","jsx","_jsx","Haunted","_ref","onChoice","cast","setCast","fetchStuff","response","fetch","json","style","display","gridTemplateColumns","gap","marginBottom","children","map","sean","href","onClick","name","src","concat","slug","alt"],"sources":["C:/snichols.co.nz/snichols1/src/HauntedPika.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst Haunted = ({onChoice}) => {\r\n    const [cast, setCast] = useState([]); /* Setting a constant for holding data. useState will generate the state */\r\n\r\n    async function fetchStuff(){\r\n        const response = await fetch('cast.json')\r\n        setCast(await response.json());\r\n    }\r\n\r\n    useEffect(() => { fetchStuff(); });\r\n\r\n    return (\r\n        <div style={{\r\n            display: \"grid\",\r\n            gridTemplateColumns: 'repeat(auto-fit, minmax(0px, 1fr))',\r\n            gap: '1rem',\r\n            marginBottom: '1rem'\r\n        }}>\r\n            {\r\n                cast.map(sean => ( /* onClick means when clicked, it sends the data back through export on line 3 to App.jsx and show the details*/\r\n                    <a href=\"javascript:void(0);\" onClick={() => { onChoice(sean) }} key={sean.slug} data-toolip={sean.name}> \r\n                    <img src={`images/${sean.slug}.png`} alt={sean.name} /> \r\n                    </a>/* Have to use the ridiculous ` ` things to close any text that has ${} in it */\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Haunted;"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE5C,KAAM,CAAAC,OAAO,CAAGC,IAAA,EAAgB,IAAf,CAACC,QAAQ,CAAC,CAAAD,IAAA,CACvB,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGR,QAAQ,CAAC,EAAE,CAAC,CAAE,2EAEtC,cAAe,CAAAS,UAAUA,CAAA,CAAE,CACvB,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,WAAW,CAAC,CACzCH,OAAO,CAAC,KAAM,CAAAE,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CAClC,CAEAX,SAAS,CAAC,IAAM,CAAEQ,UAAU,CAAC,CAAC,CAAE,CAAC,CAAC,CAElC,mBACIN,IAAA,QAAKU,KAAK,CAAE,CACRC,OAAO,CAAE,MAAM,CACfC,mBAAmB,CAAE,oCAAoC,CACzDC,GAAG,CAAE,MAAM,CACXC,YAAY,CAAE,MAClB,CAAE,CAAAC,QAAA,CAEMX,IAAI,CAACY,GAAG,CAACC,IAAI,gBAAM,gHACfjB,IAAA,MAAGkB,IAAI,CAAC,qBAAqB,CAACC,OAAO,CAAEA,CAAA,GAAM,CAAEhB,QAAQ,CAACc,IAAI,CAAC,CAAC,CAAE,CAAiB,cAAaA,IAAI,CAACG,IAAK,CAAAL,QAAA,cACxGf,IAAA,QAAKqB,GAAG,WAAAC,MAAA,CAAYL,IAAI,CAACM,IAAI,QAAO,CAACC,GAAG,CAAEP,IAAI,CAACG,IAAK,CAAE,CAAC,EADeH,IAAI,CAACM,IAExE,CAAC,gFACP,CAAC,CAEL,CAAC,CAEd,CAAC,CACD,cAAe,CAAAtB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}